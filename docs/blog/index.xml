<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Jon Writes Code</title>
    <link>https://jonathangold.ca/blog/</link>
    <description>Recent content in Blogs on Jon Writes Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 14 May 2018 11:59:07 -0400</lastBuildDate>
    
	<atom:link href="https://jonathangold.ca/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Netlink and Select</title>
      <link>https://jonathangold.ca/blog/go-netlink-and-select/</link>
      <pubDate>Mon, 14 May 2018 11:59:07 -0400</pubDate>
      
      <guid>https://jonathangold.ca/blog/go-netlink-and-select/</guid>
      <description>Go is a wonderful programming language, nestled comfortably in between low-level languages like C or Rust, and higher level languages like Python or Ruby. The convenience one gains by doing systems programming in Go, thanks to perks like syntactic simplicity and first-class concurrency, is offset by repetitive error handling, lack of direct memory access, and a few glaring omissions from the standard library (generics and binary literals come to mind.)</description>
    </item>
    
    <item>
      <title>AWS:Ec2 in Mgmt</title>
      <link>https://jonathangold.ca/blog/aws-ec2-in-mgmt/</link>
      <pubDate>Sat, 28 Apr 2018 00:11:43 -0400</pubDate>
      
      <guid>https://jonathangold.ca/blog/aws-ec2-in-mgmt/</guid>
      <description>Before dealing with the nitty-gritty of the EC2 API for Golang (and boy is it gritty,) it will help to understand the basics of mgmt and how resources are implemented. Mgmt is an open-source event-based config management solution written entirely in Golang, based on a Directed Acyclic Graph model. It is the brain-child of @purpleidea, who maintains the project and provides mentoring to new contributors (myself included.) Mgmt&amp;rsquo;s resource modules each define methods to watch, verify and change the state of any resources the user may need to maintain, as well as any relationships to other resources where appropriate.</description>
    </item>
    
  </channel>
</rss>