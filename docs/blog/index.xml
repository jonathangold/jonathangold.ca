<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Jon Writes Code</title>
    <link>https://jonathangold.ca/blog/</link>
    <description>Recent content in Blogs on Jon Writes Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 17 Nov 2018 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://jonathangold.ca/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Gitlab-CI with GCR and GKE</title>
      <link>https://jonathangold.ca/blog/gitlab-ci-with-gcr-and-gke/</link>
      <pubDate>Sat, 17 Nov 2018 12:00:00 -0500</pubDate>
      
      <guid>https://jonathangold.ca/blog/gitlab-ci-with-gcr-and-gke/</guid>
      <description>A key part of any CI/CD pipeline is getting your application from the build stage into your staging and production environments. We&amp;rsquo;re going to explore how to approach this problem using Gitlab-CI, Google Container Registry and Google Kubernetes Engine.
Let&amp;rsquo;s say you have an application living on Gitlab, and you want to release an image on Google Container Registry, and deploy it to your Kubernetes cluster automagically.
Thankfully, not just anyone can deploy containers on your cluster, so we&amp;rsquo;ll have to create a Google Cloud Platform service account with the appropriate roles.</description>
    </item>
    
    <item>
      <title>Waiting for a Systemd Job to Complete</title>
      <link>https://jonathangold.ca/blog/waiting-for-systemd-job-to-complete/</link>
      <pubDate>Tue, 15 May 2018 00:56:21 -0400</pubDate>
      
      <guid>https://jonathangold.ca/blog/waiting-for-systemd-job-to-complete/</guid>
      <description>While writing the mount resource for mgmt I needed to restart the local-fs.target and remote-fs.target systemd units in order to mount any new fstab entries. To restart a unit using godbus/dbus you can do the following:
// conn is a *dbus.Conn connection sd1 := conn.Object( &amp;quot;org.freedesktop.systemd1&amp;quot;, dbus.ObjectPath(&amp;quot;/org/freedesktop/systemd1/&amp;quot;), ) if call := sd1.Call( &amp;quot;org.freedesktop.systemd1.Manager.RestartUnit&amp;quot;, 0, &amp;quot;local-fs.target&amp;quot;, &amp;quot;fail&amp;quot;, ); call.Err != nil { return errors.Wrapf(call.Err, &amp;quot;error restarting unit: %s&amp;quot;, unit) }  When you employ a dbus call to change the state of a systemd unit, it will return right away, likely before the state has changed.</description>
    </item>
    
    <item>
      <title>Go Netlink and Select</title>
      <link>https://jonathangold.ca/blog/go-netlink-and-select/</link>
      <pubDate>Mon, 14 May 2018 11:59:07 -0400</pubDate>
      
      <guid>https://jonathangold.ca/blog/go-netlink-and-select/</guid>
      <description>Go is a wonderful programming language, nestled comfortably in between low-level languages like C or Rust, and higher level languages like Python or Ruby. The convenience one gains by doing systems programming in Go, thanks to perks like syntactic simplicity and first-class concurrency, is offset by repetitive error handling, lack of direct memory access, and a few glaring omissions from the standard library (generics and binary literals come to mind.)</description>
    </item>
    
    <item>
      <title>AWS:Ec2 in Mgmt</title>
      <link>https://jonathangold.ca/blog/aws-ec2-in-mgmt/</link>
      <pubDate>Sat, 28 Apr 2018 00:11:43 -0400</pubDate>
      
      <guid>https://jonathangold.ca/blog/aws-ec2-in-mgmt/</guid>
      <description>Before dealing with the nitty-gritty of the EC2 API for Golang (and boy is it gritty,) it will help to understand the basics of mgmt and how resources are implemented. Mgmt is an open-source event-based config management solution written entirely in Golang, based on a Directed Acyclic Graph model. It is the brain-child of @purpleidea, who maintains the project and provides mentoring to new contributors (myself included.) Mgmt&amp;rsquo;s resource modules each define methods to watch, verify and change the state of any resources the user may need to maintain, as well as any relationships to other resources where appropriate.</description>
    </item>
    
  </channel>
</rss>